conditions
simulationStudy <- function(pos, repCondition = 5, conditions){
set.seed(pos)
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers) # Create cluster
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
re <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondnition, conditions = conditions)
stopCluster(cl) # Shut down the nodes
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers) # Create cluster
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
re <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
stopCluster(cl) # Shut down the nodes
length(re)
length(re[[1]])
length(re[[1]][[1]]$tuckerCon)
re[[1]][[1]]$tuckerCon
re[[1]][[1]]$res
re[[1]][[1]]$dat
rm(list=ls())
library(parallel)
repCondition <- 1
error1 <- c(15, 6, 3.5) #corresponding to an error ratio of 5, 25, and 50%
fixednotFixed <- c(TRUE, FALSE)
conditions1 <- expand.grid(error1, fixednotFixed)
conditions1 <- cbind(conditions1, rep(0.1, 6))
names(conditions1) <- c(1, 2, 3)
error2 <- c(14, 5.55, 3.2) #corresponding to an error ratio of 5, 25, and 50%
conditions2 <- expand.grid(error2, fixednotFixed)
conditions2 <- cbind(conditions2, rep(0.005, 6))
names(conditions2) <- c(1, 2, 3)
conditions <- rbind(conditions1, conditions2)
conditions
simulationStudy <- function(pos, repCondition = 5, conditions){
set.seed(pos)
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
repCondition <- 500
error1 <- c(15, 6, 3.5) #corresponding to an error ratio of 5, 25, and 50%
fixednotFixed <- c(TRUE, FALSE)
conditions1 <- expand.grid(error1, fixednotFixed)
conditions1 <- cbind(conditions1, rep(0.1, 6))
names(conditions1) <- c(1, 2, 3)
error2 <- c(14, 5.55, 3.2) #corresponding to an error ratio of 5, 25, and 50%
conditions2 <- expand.grid(error2, fixednotFixed)
conditions2 <- cbind(conditions2, rep(0.005, 6))
names(conditions2) <- c(1, 2, 3)
conditions <- rbind(conditions1, conditions2)
conditions
simulationStudy <- function(pos, repCondition = 5, conditions){
set.seed(pos)
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
res
repCondition <- 1
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
res <- lapply(1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
############
# Begin simulation study
rm(list=ls())
library(parallel)
#the number of reps per condition
repCondition <- 1
# create conditions
error1 <- c(15, 6, 3.5) #corresponding to an error ratio of 5, 25, and 50%
fixednotFixed <- c(TRUE, FALSE)
conditions1 <- expand.grid(error1, fixednotFixed)
conditions1 <- cbind(conditions1, rep(0.1, 6))
names(conditions1) <- c(1, 2, 3)
error2 <- c(14, 5.55, 3.2) #corresponding to an error ratio of 5, 25, and 50%
conditions2 <- expand.grid(error2, fixednotFixed)
conditions2 <- cbind(conditions2, rep(0.005, 6))
names(conditions2) <- c(1, 2, 3)
conditions <- rbind(conditions1, conditions2)
conditions
#function for the simulation study
simulationStudy <- function(pos, repCondition, conditions){
set.seed(pos)
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
# run simulation on all the cores available
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
#load packages and all the simulation scripts
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
#use multicore lapply, seeds are 1:12 for the 12 conditions
res <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
res <- lapply(1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R')
res <- lapply(1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
res
res[[12]][[1]]$dat$errorRatio
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
simulationStudy <- function(pos, repCondition, conditions){
set.seed(pos)
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
NA
#simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
res
res <- clusterApplyLB(cl, 1:6, simulationStudy,
repCondition = repCondition, conditions = conditions)
simulationStudy <- function(pos, repCondition, conditions){
set.seed(pos)
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
nworkers <- detectCores()
stopCluster(cl)
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:6, simulationStudy,
repCondition = repCondition, conditions = conditions)
res
rm(list=res)
rm(list=c(res))
rm(list=list(res))
rm(list=list(res= res))
rm(list=ls())
library(parallel)
repCondition <- 1
error1 <- c(15, 6, 3.5) #corresponding to an error ratio of 5, 25, and 50%
fixednotFixed <- c(TRUE, FALSE)
conditions1 <- expand.grid(error1, fixednotFixed)
conditions1 <- cbind(conditions1, rep(0.1, 6))
names(conditions1) <- c(1, 2, 3)
error2 <- c(14, 5.55, 3.2) #corresponding to an error ratio of 5, 25, and 50%
conditions2 <- expand.grid(error2, fixednotFixed)
conditions2 <- cbind(conditions2, rep(0.005, 6))
names(conditions2) <- c(1, 2, 3)
conditions <- rbind(conditions1, conditions2)
conditions
simulationStudy <- function(pos, repCondition, conditions){
set.seed(pos)
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R')
res <- lapply(1:nrow(conditions), simulationStudy,
repCondition = repCondition, conditions = conditions)
res
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:6, simulationStudy,
repCondition = repCondition, conditions = conditions)
res
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
res <- clusterApplyLB(cl, 1:6, simulationStudy,
repCondition = repCondition, conditions = conditions)
seedList <- vector('list', 5)
seedList
seedList <- 1:(saveMoments*repCondition*12)
repCondition <- 2
saveMoments <- 5
seedList <- 1:(saveMoments*repCondition*12)
seedList
seedList <- 1:(saveMoments*12)
seedList
seedList <- split(seedList, seq_along(seedList)/saveMoments)
seedList
repCondition <- 2
saveMoments <- 5
seedList <- 1:(saveMoments*12)
seedList <- split(seedList, seq_along(seedList)/saveMoments)
seedList
seedList <- 1:(saveMoments*12)
seedList <- split(seedList, ceiling(seq_along(seedList)/saveMoments))
seedList
seedList
seedList <- 1:(saveMoments*12)
seedList <- split(seedList, ceiling(seq_along(seedList)/12))
seedList
seedList[[1]]
simulationStudy <- function(pos, repCondition, conditions, seedList){
set.seed(seedList[pos])
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
getwd()
paste('frikandel', 1)
paste('frikandel', 1, sep="")
paste('frikandel', 1, sep="_")
paste('frikandel', 1, '.R', sep="_")
paste('frikandel', 1, '.R', sep="")
paste('frikandel', 1, '.rds', sep="")
rm(list=ls())
library(parallel)
error1 <- c(15, 6, 3.5) #corresponding to an error ratio of 5, 25, and 50%
fixednotFixed <- c(TRUE, FALSE)
conditions1 <- expand.grid(error1, fixednotFixed)
conditions1 <- cbind(conditions1, rep(0.1, 6))
names(conditions1) <- c(1, 2, 3)
error2 <- c(14, 5.55, 3.2) #corresponding to an error ratio of 5, 25, and 50%
conditions2 <- expand.grid(error2, fixednotFixed)
conditions2 <- cbind(conditions2, rep(0.005, 6))
names(conditions2) <- c(1, 2, 3)
conditions <- rbind(conditions1, conditions2)
conditions
simulationStudy <- function(pos, repCondition, conditions, seedList){
set.seed(seedList[pos])
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
repCondition <- 2
saveMoments <- 5
seedList <- 1:(saveMoments*12)
seedList <- split(seedList, ceiling(seq_along(seedList)/12))
seedList[[1]]
seedList
for(i in 1:saveMoments){
# run simulation on all the cores available
simName <- paste('simRes', i, '.rds', sep="")
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
#load packages and all the simulation scripts
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
#use multicore lapply, seeds are 1:12 for the 12 conditions
res <- clusterApplyLB(cl, 1:12, simulationStudy,
repCondition = repCondition, conditions = conditions,
seedList = seedList[[i]])
stopCluster(cl)
save(res, simName)
}
stopCluster(cl)
for(i in 1:saveMoments){
# run simulation on all the cores available
simName <- paste('simRes', i, '.rds', sep="")
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
#load packages and all the simulation scripts
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
#use multicore lapply, seeds are 1:12 for the 12 conditions
res <- clusterApplyLB(cl, 1:12, simulationStudy,
repCondition = repCondition, conditions = conditions,
seedList = seedList[[i]])
stopCluster(cl)
saveRDS(res, simName)
}
for(i in 1:saveMoments){
# run simulation on all the cores available
simName <- paste('simRes', i, '.rds', sep="")
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
#load packages and all the simulation scripts
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
#use multicore lapply, seeds are 1:12 for the 12 conditions
res <- clusterApplyLB(cl, 1:12, simulationStudy,
repCondition = repCondition, conditions = conditions,
seedList = seedList[[i]])
stopCluster(cl)
saveRDS(res, simName)
}
test1 <- readRDS('simulationToCheck5.rds')
test2 <- readRDS('simRes5.rds')
test1
length(test1)
test1[[2]][2]$tuckerCon
test1[[2]]
test1[[2]][[1]]
test1[[2]][[1]]$tuckerCon
test1[[2]][[3]]$tuckerCon
test1[[2]][[2]]$tuckerCon
test2[[2]][[2]]$tuckerCon
test1[[5]][[1]]$tuckerCon
test2[[5]][[1]]$tuckerCon
repCondition <- 100
repCondition <- 100
saveMoments <- 5
seedList <- 1:(saveMoments*12)
seedList <- split(seedList, ceiling(seq_along(seedList)/12))
seedList
rm(list=ls())
library(parallel)
error1 <- c(15, 6, 3.5) #corresponding to an error ratio of 5, 25, and 50%
fixednotFixed <- c(TRUE, FALSE)
conditions1 <- expand.grid(error1, fixednotFixed)
conditions1 <- cbind(conditions1, rep(0.1, 6))
names(conditions1) <- c(1, 2, 3)
error2 <- c(14, 5.55, 3.2) #corresponding to an error ratio of 5, 25, and 50%
conditions2 <- expand.grid(error2, fixednotFixed)
conditions2 <- cbind(conditions2, rep(0.005, 6))
names(conditions2) <- c(1, 2, 3)
conditions <- rbind(conditions1, conditions2)
conditions
simulationStudy <- function(pos, repCondition, conditions, seedList){
set.seed(seedList[pos])
cat("i = ", pos, fill = TRUE)
conditionRes <- vector('list', repCondition)
error <- conditions[pos, 1]
fixednotFixed <- conditions[pos, 2]
sparsity <- conditions[pos, 3]
for(j in 1:repCondition){
conditionRes[[j]] <- tryCatch({
simRes(error, fixednotFixed, sparsity)
},
error = function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
return(conditionRes)
}
repCondition <- 100
saveMoments <- 5
seedList <- 1:(saveMoments*12)
seedList <- split(seedList, ceiling(seq_along(seedList)/12))
seedList
for(i in 1:saveMoments){
# run simulation on all the cores available
simName <- paste('simRes', i, '.rds', sep="")
nworkers <- detectCores()
cl <- makePSOCKcluster(nworkers)
#load packages and all the simulation scripts
clusterCall(cl, function() library(combinat))
clusterCall(cl, function() source('C:/Users/schipper/Desktop/simulationStudy/simulation_2ndRun/SPARSE_PCA_wRandomStart.R'))
#use multicore lapply, seeds are 1:12 for the 12 conditions
res <- clusterApplyLB(cl, 1:12, simulationStudy,
repCondition = repCondition, conditions = conditions,
seedList = seedList[[i]])
stopCluster(cl)
saveRDS(res, simName)
}
conditions
